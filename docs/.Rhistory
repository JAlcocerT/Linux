symbols<-all$symbol[101:200]
cap<- rep(0, length(symbols))
coins<- rep(0, length(symbols))
price<- rep(0, length(symbols))
rank<-rep(101:200)
marketcap<- data.frame(symbols, cap,coins,price,rank)
row<-1
#head(dataf[, (colnames(dataf) %in% c('Depr1', 'Depr2','Depr4', 'Depr7'))])
#sym<-get_crypto_quotes(symbol = "BTC")
for(i in symbols) {
#print(i)
try(sym<-get_crypto_quotes(symbol = i))
marketcap$coins[row]<-sym[, c(9)]
marketcap$price[row]<-sym[, c(16)]
#sym2<-sym[, c(9, 16)]
#marketcap$cap[row]<-sym$total_supply*sym$price
#marketcap$cap[row]<-sym[, c(9)]*sym[, c(16)]
#education[c(10:21),c(2,6:7)]
#marketcap[c(row),c(cap)]<-(marketcap$coins[row])*marketcap$price[row]
marketcap$cap[row]<-sym[, c(9)]*sym[, c(16)]
#marketcap$cap[row]<-prettyNum(sym[, c(9)]*sym[, c(16)],big.mark=",",scientific=FALSE)
Sys.sleep(2.5)
row<-row+1
}
btcv_market_cap<-as.integer(stri_sub(btcv_data[11],2,4))*10e5
elcash_market_cap<-as.integer(stri_sub(elcash_data[9],2,4))*10e5
#btcvv<-get_crypto_quotes(symbol = "BTCV")
#BTCV marketcap
#btcvv$market_cap<-btcvv$total_supply*btcvv$price
#prettyNum(btcvv$market_cap,big.mark=",",scientific=FALSE)
library(tidyverse)
library(XML)
library(rvest)
#install.packages("htmltools")
#install.packages("rvest")
#install.packages("stringi")
library(htmltools)
#library(rvest)
library(dplyr)
library(stringi)
#packageDescription("rvest")
#install.packages('xml2')
#library('xml2')
#lego_movie <- html("http://www.imdb.com/title/tt1490017/")
elcash <- read_html("https://explorer.electriccash.global/")
elcash_data<- elcash %>% #and then
html_nodes(".lead") %>%
html_text()
elcash_data[9]
stri_sub(elcash_data[9],2,4)
elcash_market_cap<-as.integer(stri_sub(elcash_data[9],2,4))*10e5
btcv <- read_html("https://explorer.bitcoinvault.global/")
btcv_data<- btcv %>% #and then
html_nodes(".lead") %>%
html_text()
#
# length(btcv_data)
#
#
# for (i in seq_len(length(btcv_data))){
# print(btcv_data[i])
# }
#
# for (i in 1:length(btcv_data)){
# print(btcv_data[i])
# }
#for (i in length(btcv_data){
for (i in 1:length(btcv_data)){
if(grepl("BTCV", btcv_data[i], fixed = TRUE)==TRUE){
pos<-i}
}
btcv_data[11]
stri_sub(btcv_data[11],2,4)
btcv_market_cap<-as.integer(stri_sub(btcv_data[11],2,4))*10e5
btcv_coins<-as.integer(stri_sub(btcv_data[10],1,2))*10e6 + as.integer(stri_sub(btcv_data[10],4,6))*10e3 + as.integer(stri_sub(btcv_data[10],8,10))
#btcv_market_cap<-  250500000
#elcash_market_cap<-166880000
#PULL top 100 to 200 from coinmarketcap
symbols<-all$symbol[101:200]
cap<- rep(0, length(symbols))
coins<- rep(0, length(symbols))
price<- rep(0, length(symbols))
rank<-rep(101:200)
marketcap<- data.frame(symbols, cap,coins,price,rank)
row<-1
#head(dataf[, (colnames(dataf) %in% c('Depr1', 'Depr2','Depr4', 'Depr7'))])
#sym<-get_crypto_quotes(symbol = "BTC")
for(i in symbols) {
#print(i)
try(sym<-get_crypto_quotes(symbol = i))
marketcap$coins[row]<-sym[, c(9)]
marketcap$price[row]<-sym[, c(16)]
#sym2<-sym[, c(9, 16)]
#marketcap$cap[row]<-sym$total_supply*sym$price
#marketcap$cap[row]<-sym[, c(9)]*sym[, c(16)]
#education[c(10:21),c(2,6:7)]
#marketcap[c(row),c(cap)]<-(marketcap$coins[row])*marketcap$price[row]
marketcap$cap[row]<-sym[, c(9)]*sym[, c(16)]
#marketcap$cap[row]<-prettyNum(sym[, c(9)]*sym[, c(16)],big.mark=",",scientific=FALSE)
Sys.sleep(2.5)
row<-row+1
}
rank_btcv<-0
rank_elcash<-0
#Loop to find the position in marketcap of both coins
for(row in 1:nrow(marketcap)) {
#print(marketcap$cap[row])
if(marketcap$cap[row]>btcv_market_cap){
rank_btcv<-rank_btcv+1}
if(marketcap$cap[row]>elcash_market_cap){
rank_elcash<-rank_elcash+1}
}
rank_btcv<-rank_btcv+101
rank_elcash<-rank_elcash+101
print(rank_btcv)
print(rank_elcash)
#https://github.com/amrrs/coinmarketcapr
#https://cran.r-project.org/web/packages/coinmarketcapr/coinmarketcapr.pdf
#install.packages("coinmarketcapr")
library(coinmarketcapr)
# install.packages("devtools")
#devtools::install_github("amrrs/coinmarketcapr")
key<-'515ee143-4929-4b57-8c9f-a033dd7e22ab'
coinmarketcapr::setup(key)
all<-get_crypto_map()
all<-all[order(all$rank),]
#btcvv<-get_crypto_quotes(symbol = "BTCV")
#BTCV marketcap
#btcvv$market_cap<-btcvv$total_supply*btcvv$price
#prettyNum(btcvv$market_cap,big.mark=",",scientific=FALSE)
library(tidyverse)
library(XML)
library(rvest)
#install.packages("htmltools")
#install.packages("rvest")
#install.packages("stringi")
library(htmltools)
#library(rvest)
library(dplyr)
library(stringi)
#packageDescription("rvest")
#install.packages('xml2')
#library('xml2')
#lego_movie <- html("http://www.imdb.com/title/tt1490017/")
elcash <- read_html("https://explorer.electriccash.global/")
elcash_data<- elcash %>% #and then
html_nodes(".lead") %>%
html_text()
elcash_data[9]
stri_sub(elcash_data[9],2,4)
elcash_market_cap<-as.integer(stri_sub(elcash_data[9],2,4))*10e5
btcv <- read_html("https://explorer.bitcoinvault.global/")
btcv_data<- btcv %>% #and then
html_nodes(".lead") %>%
html_text()
#
# length(btcv_data)
#
#
# for (i in seq_len(length(btcv_data))){
# print(btcv_data[i])
# }
#
# for (i in 1:length(btcv_data)){
# print(btcv_data[i])
# }
#for (i in length(btcv_data){
for (i in 1:length(btcv_data)){
if(grepl("BTCV", btcv_data[i], fixed = TRUE)==TRUE){
pos<-i}
}
btcv_data[11]
stri_sub(btcv_data[11],2,4)
btcv_market_cap<-as.integer(stri_sub(btcv_data[11],2,4))*10e5
btcv_coins<-as.integer(stri_sub(btcv_data[10],1,2))*10e6 + as.integer(stri_sub(btcv_data[10],4,6))*10e3 + as.integer(stri_sub(btcv_data[10],8,10))
#btcv_market_cap<-  250500000
#elcash_market_cap<-166880000
#PULL top 100 to 200 from coinmarketcap
symbols<-all$symbol[101:200]
cap<- rep(0, length(symbols))
coins<- rep(0, length(symbols))
price<- rep(0, length(symbols))
rank<-rep(101:200)
marketcap<- data.frame(symbols, cap,coins,price,rank)
row<-1
#head(dataf[, (colnames(dataf) %in% c('Depr1', 'Depr2','Depr4', 'Depr7'))])
#sym<-get_crypto_quotes(symbol = "BTC")
for(i in symbols) {
#print(i)
try(sym<-get_crypto_quotes(symbol = i))
marketcap$coins[row]<-sym[, c(9)]
marketcap$price[row]<-sym[, c(16)]
#sym2<-sym[, c(9, 16)]
#marketcap$cap[row]<-sym$total_supply*sym$price
#marketcap$cap[row]<-sym[, c(9)]*sym[, c(16)]
#education[c(10:21),c(2,6:7)]
#marketcap[c(row),c(cap)]<-(marketcap$coins[row])*marketcap$price[row]
marketcap$cap[row]<-sym[, c(9)]*sym[, c(16)]
#marketcap$cap[row]<-prettyNum(sym[, c(9)]*sym[, c(16)],big.mark=",",scientific=FALSE)
Sys.sleep(2.5)
row<-row+1
}
rank_btcv<-0
rank_elcash<-0
#Loop to find the position in marketcap of both coins
for(row in 1:nrow(marketcap)) {
#print(marketcap$cap[row])
if(marketcap$cap[row]>btcv_market_cap){
rank_btcv<-rank_btcv+1}
if(marketcap$cap[row]>elcash_market_cap){
rank_elcash<-rank_elcash+1}
}
rank_btcv<-rank_btcv+101
rank_elcash<-rank_elcash+101
print(rank_btcv)
print(rank_elcash)
rmarkdown::render('Index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Index.Rmd',
output_file = paste('index',
'.html', sep=''))
#RPi
#Get the current wd as the directory of this file
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#knitt the file on its current folder to test its view
rmarkdown::render('Linux_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#RPi
#Get the current wd as the directory of this file
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#knitt the file on its current folder to test its view
rmarkdown::render('Linux_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Linux_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#RPi
#Get the current wd as the directory of this file
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#Get the destination to the previous folder
RPi = substring(wd,1, nchar(wd)-8)
#Copy the newest html file
file.copy(from = gsub(" ", "", paste(wd,"/index.html")),RPi, overwrite = T)
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
pwd
wd
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
wd
rmarkdown::render('Linux_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#RPi
#Get the current wd as the directory of this file
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#knitt the file on its current folder to test its view
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#RPi
#Get the current wd as the directory of this file
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#knitt the file on its current folder to test its view
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#RPi
#Get the current wd as the directory of this file
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#knitt the file on its current folder to test its view
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#RPi
#Get the current wd as the directory of this file
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#knitt the file on its current folder to test its view
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#RPi
#Get the current wd as the directory of this file
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#knitt the file on its current folder to test its view
rmarkdown::render('test_index.Rmd',
output_file = paste('index',
'.html', sep=''))
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
wd
#knitt the file on its current folder to test its view
rmarkdown::render('test_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#RPi
#Get the current wd as the directory of this file
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#knitt the file on its current folder to test its view
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#RPi
#Get the current wd as the directory of this file
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
knitr::opts_chunk$set(echo = TRUE)
knitr::asis_output("Last time tested on Sept 2021 \U2714")
a = knitr::asis_output("Last time tested on Sept 2021 \U2714")
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Docker_index.Rmd',
output_file = paste('index',
'.html', sep=''))
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
setwd(wd)
wd
rmarkdown::render('Linux_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Linux_index.Rmd',
output_file = paste('index',
'.html', sep=''))
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
#knitt the file on its current folder to test its view
rmarkdown::render('RPi_index.Rmd',
output_file = paste('index',
'.html', sep=''))
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
wd<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
wd
rmarkdown::render('Linux_index.Rmd',
output_file = paste('index',
'.html', sep=''))
rmarkdown::render('Linux_index.Rmd',
output_file = paste('index',
'.html', sep=''))
